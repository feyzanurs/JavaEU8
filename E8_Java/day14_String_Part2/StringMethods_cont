                                     ***STRING METHODS****
    trim() >> eliminates leading and trailing spaces.
          String str1="       bacth 25            "; // deletes the white spaces
          str1= str1.trim(); // "batch25"
          System.out.println(str1);
---------------------------------------------------------------------------------------
    indexOf() & >> returns the position of the first occurrence of the specified character
or string in a specified string. (starts from left to count)
    lastIndexOf() >> the last index of the given character value or substring. (starts from right to count)
If it is not found, it returns -1. The index counter starts from zero.
---------------------------------------------------------------------------------------
    replace()>> returns a string replacing all the old char or CharSequence to new char or CharSequence.
    ex:       String str="Java is fun, I love learning Java";
              String str2= str.replace("Java","Python");

    replaceFirst() >> replaces the first occurrence
    ex:  String result= "Java Java Java Java Java ";
               result=result.replaceFirst("Java", "Python");

    replaceAll() >> replaces all the occurrences of old string with the new string

---------------------------------------------------------------------------------------
    substring() >> method returns a part of the string.

    We pass beginIndex and endIndex number position in the Java substring method where beginIndex is inclusive,
and endIndex is exclusive. In other words, the beginIndex starts from 0, whereas the endIndex starts from 1.

    ex: String word= "Cydeo School";
                           // 012345...
        String brand=word.substring(0, 4);// it stops on the 4th index. add+1 to print last index you put.
                System.out.println(brand);
        String brands=word.substring(0,4+1);
                System.out.println(brands);
---------------------------------------------------------------------------------------
    replace() >>  return String whose value is the concatenation of given String repeated count times.
    If the string is empty or the count is zero then the empty string is returned.

    ex: String str="Cydeo";
        String str2= str.repeat(4);
        System.out.println(str2);
---------------------------------------------------------------------------------------
    isEmpty() >> checks whether a String is empty or not.
    This method returns true if the given string is empty, else it returns false.
---------------------------------------------------------------------------------------
    isBlank() >> method to determine is a given string is blank or empty or contains only white spaces.

---------------------------------------------------------------------------------------
    equals() >>  compares the two given strings based on the data/content of the string.
    If all the contents of both the strings are the same, it returns true.
    If all characters are not matched, then it returns false

---------------------------------------------------------------------------------------
     equalsIgnoreCase() >>String class compares two strings irrespective of the case (lower or upper) of the string.
     This method returns a boolean value, true if the argument is not null and represents an equivalent
 String ignoring case, else false.

         ex:
         // Yes,YES,yEs,yES,YEs...
         System.out.println("YEs".equalsIgnoreCase("Yes"));
---------------------------------------------------------------------------------------
    contains() >> method in Java is used to search the substring in a given String.
    Returns: If the substring is found in the specified String, then it returns a true value; otherwise,
    it returns a false value.
---------------------------------------------------------------------------------------
    startsWith() >> used to check the prefix of string. It verifies if given string starts with argument string or not.
  startsWith() method is overloaded method and has two forms: boolean startsWith(String str) â€“
  returns true if the str is a prefix of the String.

---------------------------------------------------------------------------------------
    endsWith() >> method is used to check whether the string is ending with user-specified substring or not.
    Based on this comparison it returns the result in boolean value true if the specific suffix is matched or
  it returns false if the suffix does not match.